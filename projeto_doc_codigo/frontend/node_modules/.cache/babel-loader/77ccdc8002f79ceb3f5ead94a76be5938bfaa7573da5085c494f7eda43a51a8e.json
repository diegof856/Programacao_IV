{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport const usePost = url => {\n  _s();\n  const [dadosRetornados, setDadosRetornados] = useState(null);\n  const [carregando, setCarregando] = useState(false);\n  const [erro, setErro] = useState(null);\n  const [sucessoStatus, setSucessoStatus] = useState(null); // Novo estado para o status de sucesso\n\n  const httpConfig = async (dados, metodo) => {\n    setCarregando(true);\n    setErro(null);\n    setDadosRetornados(null);\n    setSucessoStatus(null);\n    const config = {\n      metodo,\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(dados)\n    };\n    try {\n      const opcoes = [url, config];\n      const requisicao = await fetch(...opcoes);\n      if (requisicao.ok) {\n        setSucessoStatus(requisicao.status); // Armazena o status de sucesso\n        // Se a API não retorna nada, não precisamos tentar requisicao.json()\n        if (requisicao.status !== 204) {\n          try {\n            const json = await requisicao.json();\n            setDadosRetornados(json);\n          } catch (e) {\n            // Se a API retorna um corpo vazio para 200/201, a conversão para JSON falhará\n            if (requisicao.status !== 200 && requisicao.status !== 201) {\n              console.error(\"Erro ao converter JSON (status \" + requisicao.status + \"):\", e);\n              setErro(\"Erro ao processar a resposta do servidor.\");\n            }\n            // Para 200/201 sem corpo, consideramos sucesso com status\n          }\n        }\n      } else {\n        const errorData = await requisicao.text(); // Tenta obter o corpo do erro como texto\n        setErro(`Erro na requisição: ${requisicao.status} - ${errorData}`);\n      }\n    } catch (error) {\n      setErro(error.message);\n    } finally {\n      setCarregando(false);\n    }\n  };\n  return {\n    httpConfig,\n    dadosRetornados,\n    carregando,\n    erro,\n    sucessoStatus\n  };\n};\n_s(usePost, \"klvF61PBzKVXsAoll8xkpd+asK0=\");","map":{"version":3,"names":["useEffect","useState","usePost","url","_s","dadosRetornados","setDadosRetornados","carregando","setCarregando","erro","setErro","sucessoStatus","setSucessoStatus","httpConfig","dados","metodo","config","headers","body","JSON","stringify","opcoes","requisicao","fetch","ok","status","json","e","console","error","errorData","text","message"],"sources":["F:/Program Files/ws-faculdade/frontend/src/hooks/usePost.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport const usePost = (url) =>{\r\n     const [dadosRetornados, setDadosRetornados] = useState(null);\r\n    const [carregando, setCarregando] = useState(false);\r\n    const [erro, setErro] = useState(null);\r\n    const [sucessoStatus, setSucessoStatus] = useState(null); // Novo estado para o status de sucesso\r\n\r\n    const httpConfig = async (dados, metodo) => {\r\n        setCarregando(true);\r\n        setErro(null);\r\n        setDadosRetornados(null);\r\n        setSucessoStatus(null);\r\n\r\n        const config = {\r\n            metodo,\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(dados)\r\n        };\r\n\r\n        try {\r\n            const opcoes = [url, config];\r\n            const requisicao = await fetch(...opcoes);\r\n\r\n            if (requisicao.ok) {\r\n                setSucessoStatus(requisicao.status); // Armazena o status de sucesso\r\n                // Se a API não retorna nada, não precisamos tentar requisicao.json()\r\n                if (requisicao.status !== 204) {\r\n                    try {\r\n                        const json = await requisicao.json();\r\n                        setDadosRetornados(json);\r\n                    } catch (e) {\r\n                        // Se a API retorna um corpo vazio para 200/201, a conversão para JSON falhará\r\n                        if (requisicao.status !== 200 && requisicao.status !== 201) {\r\n                            console.error(\"Erro ao converter JSON (status \" + requisicao.status + \"):\", e);\r\n                            setErro(\"Erro ao processar a resposta do servidor.\");\r\n                        }\r\n                        // Para 200/201 sem corpo, consideramos sucesso com status\r\n                    }\r\n                }\r\n            } else {\r\n                const errorData = await requisicao.text(); // Tenta obter o corpo do erro como texto\r\n                setErro(`Erro na requisição: ${requisicao.status} - ${errorData}`);\r\n            }\r\n        } catch (error) {\r\n            setErro(error.message);\r\n        } finally {\r\n            setCarregando(false);\r\n        }\r\n    };\r\n\r\n    return { httpConfig, dadosRetornados, carregando, erro, sucessoStatus };\r\n};"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,MAAMC,OAAO,GAAIC,GAAG,IAAI;EAAAC,EAAA;EAC1B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC7D,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1D,MAAMY,UAAU,GAAG,MAAAA,CAAOC,KAAK,EAAEC,MAAM,KAAK;IACxCP,aAAa,CAAC,IAAI,CAAC;IACnBE,OAAO,CAAC,IAAI,CAAC;IACbJ,kBAAkB,CAAC,IAAI,CAAC;IACxBM,gBAAgB,CAAC,IAAI,CAAC;IAEtB,MAAMI,MAAM,GAAG;MACXD,MAAM;MACNE,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,KAAK;IAC9B,CAAC;IAED,IAAI;MACA,MAAMO,MAAM,GAAG,CAAClB,GAAG,EAAEa,MAAM,CAAC;MAC5B,MAAMM,UAAU,GAAG,MAAMC,KAAK,CAAC,GAAGF,MAAM,CAAC;MAEzC,IAAIC,UAAU,CAACE,EAAE,EAAE;QACfZ,gBAAgB,CAACU,UAAU,CAACG,MAAM,CAAC,CAAC,CAAC;QACrC;QACA,IAAIH,UAAU,CAACG,MAAM,KAAK,GAAG,EAAE;UAC3B,IAAI;YACA,MAAMC,IAAI,GAAG,MAAMJ,UAAU,CAACI,IAAI,CAAC,CAAC;YACpCpB,kBAAkB,CAACoB,IAAI,CAAC;UAC5B,CAAC,CAAC,OAAOC,CAAC,EAAE;YACR;YACA,IAAIL,UAAU,CAACG,MAAM,KAAK,GAAG,IAAIH,UAAU,CAACG,MAAM,KAAK,GAAG,EAAE;cACxDG,OAAO,CAACC,KAAK,CAAC,iCAAiC,GAAGP,UAAU,CAACG,MAAM,GAAG,IAAI,EAAEE,CAAC,CAAC;cAC9EjB,OAAO,CAAC,2CAA2C,CAAC;YACxD;YACA;UACJ;QACJ;MACJ,CAAC,MAAM;QACH,MAAMoB,SAAS,GAAG,MAAMR,UAAU,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3CrB,OAAO,CAAC,uBAAuBY,UAAU,CAACG,MAAM,MAAMK,SAAS,EAAE,CAAC;MACtE;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZnB,OAAO,CAACmB,KAAK,CAACG,OAAO,CAAC;IAC1B,CAAC,SAAS;MACNxB,aAAa,CAAC,KAAK,CAAC;IACxB;EACJ,CAAC;EAED,OAAO;IAAEK,UAAU;IAAER,eAAe;IAAEE,UAAU;IAAEE,IAAI;IAAEE;EAAc,CAAC;AAC3E,CAAC;AAACP,EAAA,CApDWF,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}