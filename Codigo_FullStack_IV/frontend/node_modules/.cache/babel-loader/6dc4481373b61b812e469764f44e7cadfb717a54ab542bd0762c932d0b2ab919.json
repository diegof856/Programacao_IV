{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport const usePost = () => {\n  _s();\n  const [config, setConfig] = useState(null);\n  const [metodo, setMetodo] = useState(null);\n  const [url, setUrl] = useState(null);\n  const [carregamento, setCarregamento] = useState(false);\n  const [erro, setErro] = useState(null);\n  const [requisicaoCorreta, setRequisicaoCorreta] = useState(false);\n  const [resposta, setResposta] = useState(null);\n  const httpConfig = (dados, metodo, novaUrl) => {\n    setConfig({\n      method: metodo,\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify(dados)\n    });\n    setMetodo(metodo);\n    setUrl(novaUrl);\n  };\n  const limparErro = () => {\n    setErro(null);\n  };\n  useEffect(() => {\n    const httpRequest = async () => {\n      if (!config) return;\n      setCarregamento(true);\n      try {\n        const requisicao = await fetch(url, config);\n        if (!requisicao.ok) {\n          const erroTexto = await requisicao.json();\n          throw {\n            mensagem: erroTexto.mensagem,\n            status: erroTexto.status\n          };\n        }\n        setRequisicaoCorreta(true);\n        setResposta(await requisicao.json());\n      } catch (error) {\n        setErro({\n          mensagem: error.mensagem,\n          status: error.status\n        });\n        setRequisicaoCorreta(true);\n        return null;\n      } finally {\n        setCarregamento(false);\n      }\n    };\n    httpRequest();\n  }, [config, metodo, url]);\n  return {\n    httpConfig,\n    carregamento,\n    erro,\n    limparErro,\n    resposta,\n    requisicaoCorreta\n  };\n};\n_s(usePost, \"Au2yEUFE3KfUFW1d0Ytk5z+Ln+w=\");","map":{"version":3,"names":["useEffect","useState","usePost","_s","config","setConfig","metodo","setMetodo","url","setUrl","carregamento","setCarregamento","erro","setErro","requisicaoCorreta","setRequisicaoCorreta","resposta","setResposta","httpConfig","dados","novaUrl","method","headers","body","JSON","stringify","limparErro","httpRequest","requisicao","fetch","ok","erroTexto","json","mensagem","status","error"],"sources":["F:/Program Files/ws-faculdade/Programacao_IV/Codigo_FullStack_IV/frontend/src/hooks/usePost.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport const usePost = () => {\r\n    const [config, setConfig] = useState(null);\r\n    const [metodo, setMetodo] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n    const [carregamento, setCarregamento] = useState(false);\r\n    const [erro, setErro] = useState(null);\r\n    const [requisicaoCorreta,setRequisicaoCorreta] = useState(false);\r\n    const [resposta, setResposta] = useState(null)\r\n\r\n    const httpConfig = (dados, metodo, novaUrl) => {\r\n\r\n        setConfig({\r\n            method: metodo,\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(dados)\r\n        })\r\n        setMetodo(metodo);\r\n        setUrl(novaUrl);\r\n    };\r\n     const limparErro = () => {\r\n        setErro(null);\r\n      \r\n    };\r\n    useEffect(() => {\r\n        const httpRequest = async () => {\r\n            if (!config) return;\r\n         \r\n            setCarregamento(true);\r\n            try {\r\n                const requisicao = await fetch(url, config);\r\n                 \r\n                if (!requisicao.ok) {\r\n                  \r\n                    const erroTexto = await requisicao.json();\r\n\r\n                    throw { mensagem: erroTexto.mensagem, status: erroTexto.status };\r\n                }\r\n                  setRequisicaoCorreta(true)\r\n            \r\n                setResposta(await requisicao.json());\r\n               \r\n            } catch (error) {\r\n                setErro({\r\n                    mensagem: error.mensagem,\r\n                    status: error.status\r\n                });\r\n                setRequisicaoCorreta(true)\r\n                return null;\r\n            } finally {\r\n                setCarregamento(false);\r\n            }\r\n\r\n        };\r\n        httpRequest();\r\n    }, [config, metodo, url])\r\n    return { httpConfig, carregamento, erro, limparErro, resposta,requisicaoCorreta }\r\n};"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACO,GAAG,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,iBAAiB,EAACC,oBAAoB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAChE,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMiB,UAAU,GAAGA,CAACC,KAAK,EAAEb,MAAM,EAAEc,OAAO,KAAK;IAE3Cf,SAAS,CAAC;MACNgB,MAAM,EAAEf,MAAM;MACdgB,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,KAAK;IAC9B,CAAC,CAAC;IACFZ,SAAS,CAACD,MAAM,CAAC;IACjBG,MAAM,CAACW,OAAO,CAAC;EACnB,CAAC;EACA,MAAMM,UAAU,GAAGA,CAAA,KAAM;IACtBb,OAAO,CAAC,IAAI,CAAC;EAEjB,CAAC;EACDb,SAAS,CAAC,MAAM;IACZ,MAAM2B,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI,CAACvB,MAAM,EAAE;MAEbO,eAAe,CAAC,IAAI,CAAC;MACrB,IAAI;QACA,MAAMiB,UAAU,GAAG,MAAMC,KAAK,CAACrB,GAAG,EAAEJ,MAAM,CAAC;QAE3C,IAAI,CAACwB,UAAU,CAACE,EAAE,EAAE;UAEhB,MAAMC,SAAS,GAAG,MAAMH,UAAU,CAACI,IAAI,CAAC,CAAC;UAEzC,MAAM;YAAEC,QAAQ,EAAEF,SAAS,CAACE,QAAQ;YAAEC,MAAM,EAAEH,SAAS,CAACG;UAAO,CAAC;QACpE;QACEnB,oBAAoB,CAAC,IAAI,CAAC;QAE5BE,WAAW,CAAC,MAAMW,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC;MAExC,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZtB,OAAO,CAAC;UACJoB,QAAQ,EAAEE,KAAK,CAACF,QAAQ;UACxBC,MAAM,EAAEC,KAAK,CAACD;QAClB,CAAC,CAAC;QACFnB,oBAAoB,CAAC,IAAI,CAAC;QAC1B,OAAO,IAAI;MACf,CAAC,SAAS;QACNJ,eAAe,CAAC,KAAK,CAAC;MAC1B;IAEJ,CAAC;IACDgB,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,CAACvB,MAAM,EAAEE,MAAM,EAAEE,GAAG,CAAC,CAAC;EACzB,OAAO;IAAEU,UAAU;IAAER,YAAY;IAAEE,IAAI;IAAEc,UAAU;IAAEV,QAAQ;IAACF;EAAkB,CAAC;AACrF,CAAC;AAACX,EAAA,CA1DWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}